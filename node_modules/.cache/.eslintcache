[{"/Users/hannah/Desktop/github projects/type-fast2/src/index.js":"1","/Users/hannah/Desktop/github projects/type-fast2/src/reportWebVitals.js":"2","/Users/hannah/Desktop/github projects/type-fast2/src/App.js":"3","/Users/hannah/Desktop/github projects/type-fast2/src/game.js":"4"},{"size":500,"mtime":1622827097659,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1622827097660,"results":"7","hashOfConfig":"6"},{"size":5529,"mtime":1622861417507,"results":"8","hashOfConfig":"6"},{"size":0,"mtime":1622830124911,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"o036tz",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/hannah/Desktop/github projects/type-fast2/src/index.js",[],["20","21"],"/Users/hannah/Desktop/github projects/type-fast2/src/reportWebVitals.js",[],"/Users/hannah/Desktop/github projects/type-fast2/src/App.js",["22","23"],"import React, { Component } from 'react'\nimport { useEffect } from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './fonts/Lato-Regular.ttf';\nimport './game';\n\n// word array\nconst chars = [\"ㄱ\", \"ㄲ\", \"ㄴ\", \"ㄷ\", \"ㄸ\", \"ㄹ\", \"ㅁ\", \"ㅂ\", \"ㅃ\", \"ㅅ\", \"ㅆ\", \"ㅇ\", \"ㅈ\", \"ㅉ\",\n\"ㅊ\", \"ㅋ\", \"ㅌ\", \"ㅍ\", \"ㅎ\", \"ㅏ\", \"ㅐ\", \"ㅑ\", \"ㅒ\", \"ㅓ\", \"ㅔ\", \"ㅕ\", \"ㅖ\", \"ㅗ\", \"ㅛ\", \"ㅜ\", \"ㅠ\",\n\"ㅡ\", \"ㅣ\"];\nconst wordInput = document.querySelector('#word-input');\nlet level_time = 5;\nlet modeVal = 1;\nlet modeArray = chars;\n\nclass gamePage extends Component{\n  timeInterval = 0; \n  checkInterval = 0;\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      input: \"\",\n      word: \"안녕\",\n      time: level_time,\n      score: 0,\n      isPlaying: false,\n      message: \"\",\n      highscore: 0\n    };\n  }\n\n  startGame = () => {\n    level_time = 5;\n\n    this.setState({\n      isPlaying: true,\n      time: level_time,\n      score: 0,\n      message: \"\",\n      word: this.showWord(modeArray)\n    });\n    this.timeInterval = setInterval(() => {\n      this.countdown();\n    }, 1000);\n    this.checkInterval = setInterval(() => {\n      this.checkStatus();\n    }, 1000);\n  }\n\n  handleChange = (e) => {\n    if (e.target.value === \" \" && this.state.isPlaying === false){\n      this.startGame();\n    } else if (this.state.isPlaying){\n      this.setState({input: e.target.value});\n\n      if (this.matchWords(e)) {\n        console.log(level_time);\n        this.setState({\n          time: level_time,\n          input: \"\",\n          word: this.showWord(modeArray),\n          score: this.state.score + 1\n        }); \n      }\n    }\n  }\n\n  // pick and display random word\n  showWord = (words) => {\n    const randIndex = Math.floor(Math.random() * words.length);\n    return words[randIndex];\n  }\n\n  matchWords = (e) => {\n    let current_word = this.state.word;\n    let input = e.target.value;\n    \n    if (input === current_word){\n      let prev_score = this.state.score;\n      this.setState({score: prev_score + 1});\n      return true;\n    } else if (input !== current_word.slice(0, input.length)){\n      wordInput.classList.add(\"text-danger\");\n      return false;\n    } else {\n      wordInput.classList.remove(\"text-danger\");\n      this.setState({message: \"\"})\n      return false;\n    }\n  }\n\n  countdown = () => {\n    let current_time = this.state.time;\n    if (current_time > 0){\n      this.setState({time: current_time - 1});\n    } else if (current_time === 0){\n      this.setState({isPlaying: false});\n    }\n  }\n\n  checkStatus = () => {\n    let playing = this.state.isPlaying;\n    let timeLeft = this.state.time;\n    if (!playing && timeLeft === 0){\n      let current_score = this.state.score;\n      let highscore = this.state.highscore;\n      if (current_score > highscore){\n        this.setState({highscore: current_score});\n      }\n      this.setState({message: \"Game Over!\", input: \"\", isPlaying: false, score: 0});\n      clearInterval(this.timeInterval);\n      clearInterval(this.checkInterval);\n    } else if (playing && this.state.score > 0 && this.state.score % 15 === 0){\n      if (level_time > 1){\n        level_time -= 1;\n      }\n    }\n  }\n\n  toggleMode = () => {\n    modeVal *= -1;\n    if (modeVal == 1){\n      modeArray = chars;\n    } else{\n      // hi\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <header class=\"p-3 mb-5 nav\">\n            <h1 class=\"page-text name\">Type Fast</h1>\n          </header>\n          <div class=\"row wrapper\">\n            <div class=\"col-md-6 mx-auto\">\n              <div class=\"modes\">\n                <button onClick={() => {this.toggleMode()}}>character practice</button>\n                <button>word practice</button>\n              </div>\n              <h2 class=\"display-2 mb-5 page-text\" id=\"current-word\">{this.state.word}</h2>\n              <input type=\"text\" class=\"form-control form-control-lg page-text word-input\" placeholder=\"Start typing...\" id=\"word-input\"\n                  autofocus onChange={(e) => {this.handleChange(e)}} value={this.state.input}></input>\n              <h4 class=\"mt-3 page-text\" id=\"message\">{this.state.message}</h4>\n\n              <div class=\"row mt-5\">\n                  <div class=\"col-md-6\">\n                      <h3 class=\"page-text\">Time Left:\n                          <span id=\"time\"> {this.state.time}</span>\n                      </h3>\n                  </div>\n                  <div class=\"col-md-6\">\n                      <h3 class=\"page-text\">Score:\n                          <span id=\"score\"> {this.state.score}</span>\n                      </h3>\n                  </div>\n                  <div class=\"col\">\n                      <h3 class=\"page-text\">High Score:\n                          <span id=\"highscore\"> {this.state.highscore}</span>\n                      </h3>\n                  </div>\n              </div>\n\n              <div class=\"row mt-5\">\n                  <div class=\"col-md-12\">\n                      <div class=\"card-body\">\n                          <h5 class=\"page-text\">Instructions</h5>\n                          <p class=\"page-text\">Type each word or character in the given amount of seconds to score.\n                              Your time will shrink as you continue. Press space to begin.\n                          </p>\n                      </div>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default gamePage;\n","/Users/hannah/Desktop/github projects/type-fast2/src/game.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":2,"column":10,"nodeType":"30","messageId":"31","endLine":2,"endColumn":19},{"ruleId":"32","severity":1,"message":"33","line":125,"column":17,"nodeType":"34","messageId":"35","endLine":125,"endColumn":19},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]